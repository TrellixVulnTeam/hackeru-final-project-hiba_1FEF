{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(router, toastr) {\n      this.router = router;\n      this.toastr = toastr;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        var _a;\n\n        switch (err.status) {\n          case 400:\n            if ((_a = err.error) === null || _a === void 0 ? void 0 : _a.errors) {\n              // {modelName: {fieldName: 'field error message}}\n              const modelStateErrors = [];\n\n              for (const key in err.error.errors) {\n                if (err.error.errors[key]) {\n                  modelStateErrors.push(err.error.errors[key]);\n                }\n              }\n\n              throw modelStateErrors.flat();\n            } else if (typeof err.error === 'object') {\n              this.toastr.error(err.statusText === 'OK' ? \"Bad Request\" : err.statusText, err.status);\n              throw err;\n            } else {\n              this.toastr.error(err.error, err.status);\n              throw err;\n            }\n\n            break;\n\n          case 401:\n            this.toastr.error(err.statusText === 'OK' ? \"Unauthorized\" : err.statusText, err.status);\n            break;\n\n          case 404:\n            this.router.navigateByUrl('/not-found');\n            break;\n\n          case 500:\n            const navigationExtras = {\n              state: {\n                error: err.error\n              }\n            };\n            this.router.navigateByUrl('/server-error', navigationExtras);\n            break;\n\n          default:\n            this.toastr.error(\"Something unexpected want wrong\");\n            console.log(err);\n            break;\n        }\n\n        throw throwError(err);\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastrService));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}